{"remainingRequest":"/home/thiago/Projects/code/opta-invest/client/node_modules/thread-loader/dist/cjs.js!/home/thiago/Projects/code/opta-invest/client/node_modules/babel-loader/lib/index.js!/home/thiago/Projects/code/opta-invest/client/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/thiago/Projects/code/opta-invest/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/thiago/Projects/code/opta-invest/client/src/components/portfolio/allocation.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/thiago/Projects/code/opta-invest/client/src/components/portfolio/allocation.vue","mtime":1597016519791},{"path":"/home/thiago/Projects/code/opta-invest/client/node_modules/cache-loader/dist/cjs.js","mtime":1597018277274},{"path":"/home/thiago/Projects/code/opta-invest/client/node_modules/thread-loader/dist/cjs.js","mtime":1589656986772},{"path":"/home/thiago/Projects/code/opta-invest/client/node_modules/babel-loader/lib/index.js","mtime":1597018266734},{"path":"/home/thiago/Projects/code/opta-invest/client/node_modules/cache-loader/dist/cjs.js","mtime":1597018277274},{"path":"/home/thiago/Projects/code/opta-invest/client/node_modules/vue-loader/lib/index.js","mtime":1597018277682}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.function.name\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Rainbow from 'color-rainbow';\nimport axios from 'axios';\nimport AllocationChart from '@/components/portfolio/chart.vue';\nexport default {\n  name: 'allocation',\n  props: ['title', 'portfolio', 'status'],\n  components: {\n    'allocation-chart': AllocationChart\n  },\n  data: function data() {\n    return {\n      tableFields: ['asset', 'expectedReturn', 'standardDeviation', 'quantityLabel']\n    };\n  },\n  computed: {\n    solving: function solving() {\n      return this.status === 'SOLVING';\n    },\n    parametrization: {\n      set: function set(newVal) {\n        this.portfolio.parametrization.standardDeviationMaximumLabel = \"\".concat(newVal, \"%\");\n        this.portfolio.parametrization.standardDeviationMillisMaximum = newVal * 10;\n      },\n      get: function get() {\n        return (((this.portfolio || {}).parametrization || {}).standardDeviationMillisMaximum || 0) / 10;\n      }\n    },\n    allocations: function allocations() {\n      var assetsList = this.portfolio ? this.portfolio.assetClassList : [];\n      var assetsId = (assetsList || []).reduce(function (acc, e) {\n        acc[e.id] = e;\n        return acc;\n      }, {});\n      return (this.portfolio.assetClassAllocationList || []).map(function (e) {\n        return {\n          asset: assetsId[e.assetClassId].name,\n          expectedReturn: assetsId[e.assetClassId].expectedReturnLabel,\n          standardDeviation: assetsId[e.assetClassId].standardDeviationRiskLabel,\n          quantityMillis: e.quantityMillis,\n          quantityLabel: e.quantityLabel\n        };\n      });\n    },\n    chartAllocations: function chartAllocations() {\n      var colors = Rainbow.create(this.allocations.length).map(function (c) {\n        return \"rgb(\".concat(c.values.rgb.join(', '), \")\");\n      });\n      return {\n        labels: this.allocations.map(function (e) {\n          return e.asset;\n        }),\n        datasets: [{\n          backgroundColor: colors,\n          data: this.allocations.map(function (e) {\n            return e.quantityMillis;\n          })\n        }]\n      };\n    }\n  },\n  methods: {\n    parametrizationChange: function parametrizationChange(idx) {\n      var aux = parseFloat(this.parametrization);\n      var qty = Math.max(Math.min(isNaN(aux) ? 0.0 : aux, 100.0), 0.0);\n      this.parametrization = qty;\n    },\n    allocateAssets: function allocateAssets(evt) {\n      var _this = this;\n\n      var url = \"/api/portfolio/\".concat(this.portfolio.id, \"/async-allocate\");\n      axios.post(url, this.portfolio).then(function (res) {\n        _this.$emit('newStatus', res.data);\n\n        console.log(res.data);\n      }, function (error) {\n        console.error(error);\n      });\n    },\n    terminateAllocation: function terminateAllocation(evt) {\n      var url = \"/api/portfolio/\".concat(this.portfolio.id, \"/terminate\");\n      axios.get(url).then(function (res) {\n        console.log(res.data);\n      }, function (error) {\n        console.error(error);\n      });\n    }\n  }\n};",{"version":3,"sources":["allocation.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div id=\"assets\">\n    <b-row>\n      <h1>{{ title }}</h1>\n    </b-row>\n    <b-row>\n      <b-form>\n        <b-button size=\"sm\" variant=\"success\" @click=\"allocateAssets\">Allocate Assets</b-button>\n        <b-button size=\"sm\" variant=\"danger\" @click=\"terminateAllocation\">Terminate Allocation</b-button>\n        <b-badge pill variant=\"primary\">{{ status }}</b-badge>\n      </b-form>\n    </b-row>\n    <b-row>\n      <b-col cols=\"6\">\n        <b-container fluid>\n          <b-row>\n            <b-col sm=\"6\">\n              <label for=\"input-std\">Maximum Standard Deviation:</label>\n            </b-col>\n            <b-col sm=\"3\">\n              <b-input-group size=\"sm\" append=\"%\">\n                <b-form-input id=\"input-std\" v-model.trim=\"parametrization\" @change=\"parametrizationChange\" type=\"number\" :disabled=\"solving\"/>\n              </b-input-group>\n            </b-col>\n          </b-row>\n        </b-container>\n        <b-table striped hover :items=\"allocations\" :fields=\"tableFields\"/>\n        <p>\n          Expected Return: <b>{{ (portfolio || {}).expectedReturnLabel }}</b>,\n          Standard Deviation Risk: <b>{{ (portfolio || {}).standardDeviationLabel }}</b>\n        </p>\n      </b-col>\n      <b-col cols=\"6\">\n          <allocation-chart :chart-data=\"chartAllocations\"/>\n      </b-col>\n    </b-row>\n  </div>\n</template>\n\n<script>\nimport Rainbow from 'color-rainbow'\nimport axios from 'axios'\nimport AllocationChart from '@/components/portfolio/chart.vue'\n\nexport default {\n  name: 'allocation',\n  props: ['title', 'portfolio', 'status'],\n  components: {\n    'allocation-chart': AllocationChart\n  },\n  data () {\n    return {\n      tableFields: ['asset', 'expectedReturn', 'standardDeviation', 'quantityLabel']\n    }\n  },\n  computed: {\n    solving () {\n      return this.status === 'SOLVING'\n    },\n    parametrization: {\n      set (newVal) {\n        this.portfolio.parametrization.standardDeviationMaximumLabel = `${newVal}%`\n        this.portfolio.parametrization.standardDeviationMillisMaximum = newVal * 10\n      },\n      get () {\n        return (((this.portfolio || {}).parametrization || {}).standardDeviationMillisMaximum || 0) / 10\n      }\n    },\n    allocations () {\n      const assetsList = this.portfolio ? this.portfolio.assetClassList : []\n      const assetsId = (assetsList || []).reduce((acc, e) => { acc[e.id] = e; return acc }, {})\n\n      return (this.portfolio.assetClassAllocationList || []).map(e => ({\n        asset: assetsId[e.assetClassId].name,\n        expectedReturn: assetsId[e.assetClassId].expectedReturnLabel,\n        standardDeviation: assetsId[e.assetClassId].standardDeviationRiskLabel,\n        quantityMillis: e.quantityMillis,\n        quantityLabel: e.quantityLabel}))\n    },\n    chartAllocations () {\n      const colors = Rainbow.create(this.allocations.length).map(c => `rgb(${c.values.rgb.join(', ')})`)\n      return {\n        labels: this.allocations.map(e => e.asset),\n        datasets: [{\n          backgroundColor: colors,\n          data: this.allocations.map(e => e.quantityMillis)\n        }]\n      }\n    }\n  },\n  methods: {\n    parametrizationChange (idx) {\n      const aux = parseFloat(this.parametrization)\n      const qty = Math.max(Math.min(isNaN(aux) ? 0.0 : aux, 100.0), 0.0)\n      this.parametrization = qty\n    },\n    allocateAssets (evt) {\n      const url = `/api/portfolio/${this.portfolio.id}/async-allocate`\n      axios.post(url, this.portfolio)\n      .then(res => {\n        this.$emit('newStatus', res.data)\n        console.log(res.data)\n      }, error => {\n        console.error(error)\n      })\n    },\n    terminateAllocation (evt) {\n      const url = `/api/portfolio/${this.portfolio.id}/terminate`\n      axios.get(url)\n      .then(res => {\n        console.log(res.data)\n      }, error => {\n        console.error(error)\n      })\n    }\n  }\n}\n</script>"],"sourceRoot":"src/components/portfolio"}]}