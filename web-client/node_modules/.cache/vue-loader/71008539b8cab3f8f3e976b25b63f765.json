{"remainingRequest":"/home/thiago/Projects/code/opta-invest/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/thiago/Projects/code/opta-invest/client/src/components/portfolio/allocation.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/thiago/Projects/code/opta-invest/client/src/components/portfolio/allocation.vue","mtime":1597016519791},{"path":"/home/thiago/Projects/code/opta-invest/client/node_modules/cache-loader/dist/cjs.js","mtime":1597018277274},{"path":"/home/thiago/Projects/code/opta-invest/client/node_modules/babel-loader/lib/index.js","mtime":1597018266734},{"path":"/home/thiago/Projects/code/opta-invest/client/node_modules/cache-loader/dist/cjs.js","mtime":1597018277274},{"path":"/home/thiago/Projects/code/opta-invest/client/node_modules/vue-loader/lib/index.js","mtime":1597018277682}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Rainbow from 'color-rainbow'\nimport axios from 'axios'\nimport AllocationChart from '@/components/portfolio/chart.vue'\n\nexport default {\n  name: 'allocation',\n  props: ['title', 'portfolio', 'status'],\n  components: {\n    'allocation-chart': AllocationChart\n  },\n  data () {\n    return {\n      tableFields: ['asset', 'expectedReturn', 'standardDeviation', 'quantityLabel']\n    }\n  },\n  computed: {\n    solving () {\n      return this.status === 'SOLVING'\n    },\n    parametrization: {\n      set (newVal) {\n        this.portfolio.parametrization.standardDeviationMaximumLabel = `${newVal}%`\n        this.portfolio.parametrization.standardDeviationMillisMaximum = newVal * 10\n      },\n      get () {\n        return (((this.portfolio || {}).parametrization || {}).standardDeviationMillisMaximum || 0) / 10\n      }\n    },\n    allocations () {\n      const assetsList = this.portfolio ? this.portfolio.assetClassList : []\n      const assetsId = (assetsList || []).reduce((acc, e) => { acc[e.id] = e; return acc }, {})\n\n      return (this.portfolio.assetClassAllocationList || []).map(e => ({\n        asset: assetsId[e.assetClassId].name,\n        expectedReturn: assetsId[e.assetClassId].expectedReturnLabel,\n        standardDeviation: assetsId[e.assetClassId].standardDeviationRiskLabel,\n        quantityMillis: e.quantityMillis,\n        quantityLabel: e.quantityLabel}))\n    },\n    chartAllocations () {\n      const colors = Rainbow.create(this.allocations.length).map(c => `rgb(${c.values.rgb.join(', ')})`)\n      return {\n        labels: this.allocations.map(e => e.asset),\n        datasets: [{\n          backgroundColor: colors,\n          data: this.allocations.map(e => e.quantityMillis)\n        }]\n      }\n    }\n  },\n  methods: {\n    parametrizationChange (idx) {\n      const aux = parseFloat(this.parametrization)\n      const qty = Math.max(Math.min(isNaN(aux) ? 0.0 : aux, 100.0), 0.0)\n      this.parametrization = qty\n    },\n    allocateAssets (evt) {\n      const url = `/api/portfolio/${this.portfolio.id}/async-allocate`\n      axios.post(url, this.portfolio)\n      .then(res => {\n        this.$emit('newStatus', res.data)\n        console.log(res.data)\n      }, error => {\n        console.error(error)\n      })\n    },\n    terminateAllocation (evt) {\n      const url = `/api/portfolio/${this.portfolio.id}/terminate`\n      axios.get(url)\n      .then(res => {\n        console.log(res.data)\n      }, error => {\n        console.error(error)\n      })\n    }\n  }\n}\n",{"version":3,"sources":["allocation.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwCA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"allocation.vue","sourceRoot":"src/components/portfolio","sourcesContent":["<template>\n  <div id=\"assets\">\n    <b-row>\n      <h1>{{ title }}</h1>\n    </b-row>\n    <b-row>\n      <b-form>\n        <b-button size=\"sm\" variant=\"success\" @click=\"allocateAssets\">Allocate Assets</b-button>\n        <b-button size=\"sm\" variant=\"danger\" @click=\"terminateAllocation\">Terminate Allocation</b-button>\n        <b-badge pill variant=\"primary\">{{ status }}</b-badge>\n      </b-form>\n    </b-row>\n    <b-row>\n      <b-col cols=\"6\">\n        <b-container fluid>\n          <b-row>\n            <b-col sm=\"6\">\n              <label for=\"input-std\">Maximum Standard Deviation:</label>\n            </b-col>\n            <b-col sm=\"3\">\n              <b-input-group size=\"sm\" append=\"%\">\n                <b-form-input id=\"input-std\" v-model.trim=\"parametrization\" @change=\"parametrizationChange\" type=\"number\" :disabled=\"solving\"/>\n              </b-input-group>\n            </b-col>\n          </b-row>\n        </b-container>\n        <b-table striped hover :items=\"allocations\" :fields=\"tableFields\"/>\n        <p>\n          Expected Return: <b>{{ (portfolio || {}).expectedReturnLabel }}</b>,\n          Standard Deviation Risk: <b>{{ (portfolio || {}).standardDeviationLabel }}</b>\n        </p>\n      </b-col>\n      <b-col cols=\"6\">\n          <allocation-chart :chart-data=\"chartAllocations\"/>\n      </b-col>\n    </b-row>\n  </div>\n</template>\n\n<script>\nimport Rainbow from 'color-rainbow'\nimport axios from 'axios'\nimport AllocationChart from '@/components/portfolio/chart.vue'\n\nexport default {\n  name: 'allocation',\n  props: ['title', 'portfolio', 'status'],\n  components: {\n    'allocation-chart': AllocationChart\n  },\n  data () {\n    return {\n      tableFields: ['asset', 'expectedReturn', 'standardDeviation', 'quantityLabel']\n    }\n  },\n  computed: {\n    solving () {\n      return this.status === 'SOLVING'\n    },\n    parametrization: {\n      set (newVal) {\n        this.portfolio.parametrization.standardDeviationMaximumLabel = `${newVal}%`\n        this.portfolio.parametrization.standardDeviationMillisMaximum = newVal * 10\n      },\n      get () {\n        return (((this.portfolio || {}).parametrization || {}).standardDeviationMillisMaximum || 0) / 10\n      }\n    },\n    allocations () {\n      const assetsList = this.portfolio ? this.portfolio.assetClassList : []\n      const assetsId = (assetsList || []).reduce((acc, e) => { acc[e.id] = e; return acc }, {})\n\n      return (this.portfolio.assetClassAllocationList || []).map(e => ({\n        asset: assetsId[e.assetClassId].name,\n        expectedReturn: assetsId[e.assetClassId].expectedReturnLabel,\n        standardDeviation: assetsId[e.assetClassId].standardDeviationRiskLabel,\n        quantityMillis: e.quantityMillis,\n        quantityLabel: e.quantityLabel}))\n    },\n    chartAllocations () {\n      const colors = Rainbow.create(this.allocations.length).map(c => `rgb(${c.values.rgb.join(', ')})`)\n      return {\n        labels: this.allocations.map(e => e.asset),\n        datasets: [{\n          backgroundColor: colors,\n          data: this.allocations.map(e => e.quantityMillis)\n        }]\n      }\n    }\n  },\n  methods: {\n    parametrizationChange (idx) {\n      const aux = parseFloat(this.parametrization)\n      const qty = Math.max(Math.min(isNaN(aux) ? 0.0 : aux, 100.0), 0.0)\n      this.parametrization = qty\n    },\n    allocateAssets (evt) {\n      const url = `/api/portfolio/${this.portfolio.id}/async-allocate`\n      axios.post(url, this.portfolio)\n      .then(res => {\n        this.$emit('newStatus', res.data)\n        console.log(res.data)\n      }, error => {\n        console.error(error)\n      })\n    },\n    terminateAllocation (evt) {\n      const url = `/api/portfolio/${this.portfolio.id}/terminate`\n      axios.get(url)\n      .then(res => {\n        console.log(res.data)\n      }, error => {\n        console.error(error)\n      })\n    }\n  }\n}\n</script>"]}]}